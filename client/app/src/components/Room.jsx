import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import EmojiPicker from 'emoji-picker-react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const socket = io('http://127.0.0.1:3000');

function Room() {
    const navigate = useNavigate();
    const [userId, setUserId] = useState(null);
    const [message, setMessage] = useState('');
    const [messages, setMessages] = useState([]);
    const [showEmojiPicker, setShowEmojiPicker] = useState(false);
    const [editingMessageId, setEditingMessageId] = useState(null);
    const [editingMessageText, setEditingMessageText] = useState('');

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        document.title = `–ß–∞—Ç - ${messages.length} ${messages.length === 1 ? '—Å–æ–æ–±—â–µ–Ω–∏–µ' : '—Å–æ–æ–±—â–µ–Ω–∏–π'}`;
    }, [messages.length]);

    useEffect(() => {
        const fetchUserData = async () => {
            const token = localStorage.getItem('token');
            if (!token) {
                toast.error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
                navigate('/login');
                return;
            }
            try {
                const response = await axios.get('http://localhost:3000/api/current-user', {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                });
                setUserId(response.data.userId);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
                toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
            }
        };

        const loadMessages = async () => {
            try {
                const response = await axios.get('http://localhost:3000/api/messages');
                setMessages(response.data);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ –∫–æ–º–Ω–∞—Ç—É
                socket.emit('userJoined', response.data.userId); // –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                for (const msg of response.data) {
                    await axios.post(`http://localhost:3000/api/messages/${msg.id}/view`, {}, { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } });
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
                toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.');
            }
        };

        fetchUserData();
        loadMessages();

        socket.on('receiveMessage', (newMessage) => {
            setMessages(prevMessages => [...prevMessages, newMessage]);
            toast.info(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${newMessage.message}`);
        });

        socket.on('messageViewed', (messageId) => {
            setMessages((prevMessages) => {
                return prevMessages.map((msg) => {
                    if (msg.id === messageId) {
                        return { ...msg, viewed_by: [...(msg.viewed_by || []), userId] }; 
                    }
                    return msg;
                });
            });
        });

        toast.success('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞!');

        return () => {
            socket.off('receiveMessage');
            socket.off('messageViewed');
        };
    }, []);

    const handleSendMessage = () => {
        if (message.trim() && userId) {
            socket.emit('sendMessage', { userId, message });
            setMessage('');
        } else {
            toast.error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    };

    const handleEditClick = (msg) => {
        setEditingMessageId(msg.id);
        setEditingMessageText(msg.message);
    };

    const handleEditSubmit = async (e) => {
        e.preventDefault();
        if (!editingMessageText.trim()) {
            toast.error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
            return;
        }

        try {
            const token = localStorage.getItem('token'); // Get token from local storage
            await axios.put(`http://localhost:3000/api/messages/${editingMessageId}`, 
                { message: editingMessageText }, 
                { headers: { Authorization: `Bearer ${token}` } }
            );
            setMessages(prevMessages =>
                prevMessages.map(msg =>
                    msg.id === editingMessageId ? { ...msg, message: editingMessageText } : msg
                )
            );
            setEditingMessageId(null);
            setEditingMessageText('');
            toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
        } catch (error) {
            console.error(error);
            toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + (error.response?.data || error.message));
        }
    };
    
    const handleDeleteClick = async (messageId) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?')) {
            try {
                const token = localStorage.getItem('token'); // Get token from local storage
                await axios.delete(`http://localhost:3000/api/messages/${messageId}`, { headers: { Authorization: `Bearer ${token}` } });
                setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));
                toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!');
            } catch (error) {
                console.error(error);
                toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + (error.response?.data || error.message));
            }
        }
    };

    const handleEmojiClick = (emojiObject) => {
        setMessage(prev => prev + emojiObject.emoji);
        setShowEmojiPicker(false);
    };

    const handleLogout = () => {
        toast.loading('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        localStorage.removeItem('token');
        setTimeout(() => navigate('/login'), 2000);
    };

    return (
        <div>
            <h1>–ö–æ–º–Ω–∞—Ç–∞ —á–∞—Ç–∞</h1>
            
            <div>
                {messages.map((msg) => (
                    <div key={msg.id}>
                        <strong>{msg.username}</strong>: 
                        <span>{msg.message}</span>
                        <span> ({msg.viewed_by ? msg.viewed_by.length : 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)</span>
                        {editingMessageId === msg.id ? (
                            <form onSubmit={handleEditSubmit}>
                                <input
                                    type="text"
                                    value={editingMessageText}
                                    onChange={(e) => setEditingMessageText(e.target.value)}
                                    required
                                />
                                <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            </form>
                        ) : (
                            <>
                                <button onClick={() => handleEditClick(msg)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                                <button onClick={() => handleDeleteClick(msg.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                            </>
                        )}
                    </div>
                ))}
            </div>

            <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            />
            <button onClick={handleSendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            <button onClick={() => setShowEmojiPicker(!showEmojiPicker)}>üòÄ</button>
            <button onClick={handleLogout}>–í—ã–π—Ç–∏</button>

            {showEmojiPicker && (
                <EmojiPicker onEmojiClick={handleEmojiClick} />
            )}
            
            <ToastContainer />
        </div>
    );
}

export default Room;
